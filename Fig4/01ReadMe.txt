This directory contains everything to create Fig 4.

######################################
Underlying data:

./Data/Ball1_TrajectoryAndCurrent.txt
./Data/Ball2_TrajectoryAndCurrent.txt

Each data file contains the trajectory and the current of one sqigglebot in disc arena.
The trajectories are synchronised in time.
Content of data file: 1st column x position, 2nd column y position, 3rd column current.
Frames (individual positions) are recorded at a rate of 25 frames per second.

######################################
The python script 02Compute.py :

- identifies inter-particle collisions
- categories collisions into :
	+ wall collisions - particle collision starts in the proximity of the wall
	+ bulk collisions - particle collision starts in the bulk
	+ mix collisions - collision starts when one particle is in the proximity of the wall
- computes collision angles
- computes probability distribution of collision angles per category
- computes probability distribution of current per category

-------> To compute incoming angle launch script as <-------
python3 02Compute.py F
- computes incoming collision angle

-------> To compute outgoing angle launch script as <-------
python3 02_ComputeAngle.py R
- computes incoming angle of TIME-REVERSED trajectories, i.e the outgoing angle of the NON-time-reversed trajectories


Input :

./Data/Ball1_TrajectoryAndCurrent.txt
./Data/Ball2_TrajectoryAndCurrent.txt

Output :

'./Data/Out_Forward0.95.pkl' for (python3 02Compute.py F)
   Type : python pickle
   Pickles Object : python dictionary
   Dictionary content:
 	DataPath = './Data/Out_Forward0.95.pkl'
	with open(DataPath, 'rb') as f:
	    DatF = pickle.load(f)

	DatF['Angle'] : np.array([a0, a1, a2, ..., aN]) - a_i = (i + 0.5) * pi / N
	DatF['P_of_Angle_wall'] : np.array([Pw0, Pw1, Pw2, ..., PwN]) - P_wall(a_i)
	DatF['P_of_Angle_bulk'] : np.array([Pb0, Pb1, Pb2, ..., PbN]) - P_bulk(a_i)
	DatF['P_of_Angle_mix'] : np.array([Pm0, Pm1, Pm2, ..., PmN]) - P_mix(a_i)
	DatF['P_of_Angle'] : np.array([P0, P1, P2, ..., PN]) - P(a_i)

	DatF['current'] : np.array([c0, c1, c2, ..., cM]) - c_i = c_min + (i + 0.5) * (c_max - c_min) / M
	DatF['P_of_current_wall'] : np.array([c0, c1, c2, ..., cM]) - p_wall(c_i)
	DatF['P_of_current_bulk'] : np.array([c0, c1, c2, ..., cM]) - p_bulk(c_i)
	DatF['P_of_current_mix'] : np.array([c0, c1, c2, ..., cM]) - p_mix(c_i)


'./Data/Out_Backward0.95.pkl' for (python3 02Compute.py R)
   Same as './Data/Out_Forward0.95.pkl'

'CollBackward*.png' for (python3 02Compute.py R)
	Illustration of collisions

'CollForward*.png' for (python3 02Compute.py F)
	Illustration of collisions

######################################
03PlotF4.py : 
- uses files generated by 02Compute.py to generate Figure 4 

######################################
Funtions_02Compute.py : 
- Contains definition of functions and data class used in 02Compute.py  

